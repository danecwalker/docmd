{{- define "error" -}}

{{- $error := .Error -}}

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ERROR</title>

  <style id="theme">
    :root {
      --color-text: 0 0% 17%;
      --color-text-muted: 0 0% 34%;
      --color-background: 0 0% 100%;
      --color-background-hover: 0 0% 96%;
      --color-link: 221 87% 60%;
      --color-border: 0 0% 93%;

      --color-code-foreground: 0 0% 0%;
      --color-code-background: 0 0% 98%;
      --color-code-keyword: 301 63% 40%;
      --color-code-builtin: 41 99% 38%;
      --color-code-named: 221 87% 60%;
      --color-code-named-other: 5 74% 59%;
      --color-code-string: 119 34% 47%;
      --color-code-number: 41 99% 38%;
      --color-code-operator: 301 63% 40%;
      --color-code-punctuation: 0 0% 0%;
      --color-code-comment: 231 4% 64%;
    }   
    .hidden {
  display: none !important;
}

*,
*::before,
*::after {
  -webkit-box-sizing: border-box;
  /* Safari/Chrome, other WebKit */
  -moz-box-sizing: border-box;
  /* Firefox, other Gecko */
  box-sizing: border-box;
  /* Opera/IE 8+ */
  padding: 0;
  margin: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-size: 16px;
  tab-size: 4;
  padding: 0;
  margin: 0;
  color: hsl(var(--color-text));
  background-color: hsl(var(--color-background));
  transition: color, background-color 0.2s ease-out;
}

code {
  font-family: "SF Mono", SFMono-Regular, ui-monospace, "DejaVu Sans Mono",
    Menlo, Consolas, monospace;
  font-size: 0.875em;
  line-height: 1.25rem;
}

img {
  max-width: 100%;
  height: auto;
  object-fit: cover;
}

a {
  color: hsl(var(--color-text));
  text-decoration: none;
  transition: color 0.2s ease-out;
}

button {
  cursor: pointer;
  border: none;
  background: none;
  outline: none;
  color: hsl(var(--color-text));
  transition: color 0.2s ease-out;
}

input[type="checkbox"] {
  /* Add if not using autoprefixer */
  -webkit-appearance: none;
  appearance: none;
  /* For iOS < 15 to remove gradient background */
  background-color: #fff;
  /* Not removed via appearance */
  margin: 0;

  font: inherit;
  color: currentColor;
  width: 1.15em;
  height: 1.15em;
  color: hsl(var(--color-background));
  border: 1px solid hsl(var(--color-border));
  background-color: hsl(var(--color-code-background));
  border-radius: 0.15em;
  transform: translateY(0.2em);
  transition: background-color 0.2s ease-out;
}

input[type="checkbox"]:checked {
  background-color: hsl(var(--color-link));
  color: hsl(var(--color-background));
}

input[type="checkbox"] {
  display: inline-flex;
  color: hsl(var(--color-background));
}

input[type="checkbox"]::before {
  content: "";
  color: hsl(var(--color-background));
  position: absolute;
  top: 50%;
  left: 50%;
  width: 80%;
  height: 80%;
  transform: translate(-50%, -50%) scale(0);
  background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="%23ffffff" d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/></svg>');
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  transition: transform 0.2s ease-out;
}

input[type="checkbox"]:checked:before {
  transform: translate(-50%, -50%) scale(1);
}

.container {
  min-height: 100dvh;
  display: flex;
  flex-direction: column;
}

.header {
  width: 100%;
  border-bottom: 1px solid hsl(var(--color-border));
  padding: 1.5rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: border-bottom 0.2s ease-out;
}

.header>.logo {
  width: 100%;
  padding: 0 3rem;
}

.header>.logo>img {
  height: 2rem;
}

.header>.logo>h1 {
  font-size: 1.5rem;
  line-height: 2rem;
  font-weight: 700;
  text-align: center;
}

.header>div:nth-child(3),.header>div:nth-child(1) {
  width: 100%;
  padding: 0 3rem;
}

.content {
  width: 100%;
  display: flex;
  flex: 1;
}

.content>.main {
  flex: 1;
  padding: 0 2rem;
}

.content>.main>main {
  max-width: 60rem;
  margin-inline: auto;
  padding: 2rem 0;
}
.md h1 {
  font-weight: 700;
  font-size: 2rem;
  line-height: 1.25;
  overflow-wrap: break-word;
  margin-bottom: 2rem;
  margin-top: 0;
}

@media (min-width: 640px) {
  .md h1 {
    font-size: 2.25rem;
  }
}

.md h2 {
  font-weight: 700;
  font-size: 1.5rem;
  line-height: 1.25;
  margin-top: 1.5rem;
  margin-bottom: 0;
}

.md :not(h1)+h2 {
  margin-top: 3rem;
}

.md h3 {
  font-weight: 600;
  font-size: 1.25rem;
  line-height: 1.25;
  margin-top: 1.5rem;
  margin-bottom: 0;
}

.md>p {
  margin-top: 1rem;
  margin-bottom: 0;
}

.md a {
  color: hsl(var(--color-link));
  text-decoration: none;
}

.md a:hover {
  text-decoration: underline;
}

.md>ul {
  margin-top: 1rem;
  margin-bottom: 0;
  list-style-type: disc;
  list-style-position: inside;
  padding-left: 0;
}

.md>ol {
  margin-top: 1rem;
  margin-bottom: 0;
  list-style-type: decimal;
  list-style-position: inside;
  padding-left: 0;
}

.md ul>li>ul {
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 1.5rem;
  list-style-type: disc;
  list-style-position: inside;
}

.md ol>li>ol {
  margin-top: 0;
  margin-bottom: 0;
  padding-left: 1.5rem;
  list-style-type: decimal;
  list-style-position: inside;
}

.md li {
  margin-bottom: 0.125rem;
}

.md>.chroma {
  position: relative;
  font-size-adjust: from-font;
  margin-top: 1rem;
  margin-bottom: 0;
  color: hsl(var(--color-code-foreground));
  background-color: hsl(var(--color-code-background));
  border: 1px solid hsl(var(--color-border));
  border-radius: 0.375rem;
  padding: 1rem;
  line-height: 1.375;
  overflow: auto;
}

.md>.chroma>.copy {
  opacity: 0;
  pointer-events: none;
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  background-color: hsl(var(--color-code-background));
  color: hsl(var(--color-code-foreground));
  border: 1px solid hsl(var(--color-border));
  border-radius: 0.375rem;
  font-size: 0.875rem;
  cursor: pointer;
  width: 2rem;
  height: 2rem;
  transition: all 0.2s ease-out;
}

.md>.chroma:hover>.copy {
  pointer-events: all;
  opacity: 1;
}

.md>.chroma>.copy:hover {
  background-color: hsl(var(--color-background-hover));
  transition: background-color 0.2s ease-out;
}

.md>.chroma a {
  all: inherit;
  text-decoration: underline;
}

.md>.chroma .line {
  display: flex;
}

/* Other */
.md>.chroma .x {
  color: #cb4b16
}

/* LineLink */
.md>.chroma .lnlinks {
  outline: none;
  text-decoration: none;
  color: inherit
}

/* LineTableTD */
.md>.chroma .lntd {
  vertical-align: top;
  padding: 0;
  margin: 0;
  border: 0;
}

/* LineTable */
.md>.chroma .lntable {
  border-spacing: 0;
  padding: 0;
  margin: 0;
  border: 0;
}

/* LineHighlight */
.md>.chroma .hl {
  background-color: #19404a
}

/* LineNumbersTable */
.md>.chroma .lnt {
  white-space: pre;
  -webkit-user-select: none;
  user-select: none;
  margin-right: 0.4em;
  padding: 0 0.4em 0 0.4em;
  color: #495050
}

/* LineNumbers */
.md>.chroma .ln {
  white-space: pre;
  -webkit-user-select: none;
  user-select: none;
  margin-right: 0.4em;
  padding: 0 0.4em 0 0.4em;
  color: #495050
}

/* Keyword */
.md>.chroma .k,
.kd,
.kn,
.kp,
.kr,
.kt {
  color: hsl(var(--color-code-keyword));
  transition: color 0.2s ease-out;
}

/* Builtin */
.md>.chroma .kc {
  color: hsl(var(--color-code-builtin));
  transition: color 0.2s ease-out;
}

/* Named */
.md>.chroma .nc,
.nb,
.bp,
.nf,
.no,
.nd,
.ni,
.ne,
.nt,
.nv {
  color: hsl(var(--color-code-named));
  transition: color 0.2s ease-out;
}

/* Named Other */
.md>.chroma .nx {
  color: hsl(var(--color-code-named-other));
  transition: color 0.2s ease-out;
}

/* String Literals */
.md>.chroma .s,
.sa,
.sb,
.sc,
.dl,
.s2,
.se,
.si,
.sx,
.sr,
.s1,
.ss {
  color: hsl(var(--color-code-string));
  transition: color 0.2s ease-out;
}

/* Number Literals */
.md>.chroma .m,
.mb,
.mf,
.mh,
.mi,
.il,
.mo {
  color: hsl(var(--color-code-number));
  transition: color 0.2s ease-out;
}

/* Operators */
.md>.chroma .o,
.ow {
  color: hsl(var(--color-code-operator));
  transition: color 0.2s ease-out;
}

/* Punctuation */
.md>.chroma .p {
  color: hsl(var(--color-code-punctuation));
  transition: color 0.2s ease-out;
}

/* Comments */
.md>.chroma .c,
.ch,
.cm,
.c1,
.cs,
.cp,
.cpf {
  color: hsl(var(--color-code-comment));
  transition: color 0.2s ease-out;
}

.md del {
  text-decoration: line-through;
  color: hsl(var(--color-text-muted));
}


.md .table-wrapper {
  overflow: auto;
  width: 100%;
  white-space: nowrap;
  padding-bottom: 1rem;
  margin-top: 1rem;
}

.md table {
  margin-bottom: 0;
  width: 100%;
  text-align: left;
  border-spacing: 0;
}

.md thead,
.md tbody {
  width: 100%;
}

.md td {
  border-bottom: 1px solid rgb(221, 221, 221);
  padding-top: 0.375rem;
  padding-bottom: 0.375rem;
  padding-left: 0.25rem;
  padding-right: 0.25rem;
  table-layout: auto;
}

.md th {
  font-weight: 500;
  font-size: 0.875rem;
  padding-top: 0.375rem;
  padding-bottom: 0.375rem;
  padding-left: 0.25rem;
  padding-right: 0.25rem;
  border-bottom: 1px solid rgb(44, 44, 44);
}

.md blockquote {
  margin: 0;
  margin-top: 1rem;
  border-left: 2px solid rgb(150, 150, 150);
  padding-left: 0.5rem;
  color: rgb(150, 150, 150);
}

.md blockquote>p {
  margin: 0;
}
  </style>
</head>

<body>
  <div class="container">
    <header class="header">
      <div></div>
      <div class="logo">
        <h1>Error</h1>
      </div>
      <div>
      </div>
    </header>
    <div class="content">
      <div class="main">
        <main class="md">
          <pre class="chroma"><code>{{ $error }}</code></pre>
        </main>
      </div>
    </div>
  </div>

  <script>
  // find all pre tags
  document.onload = (function() {
    var pre = document.querySelectorAll('pre.chroma');
    // loop through all pre tags
    for (var i = 0; i < pre.length; i++) {
      console.log('pre', pre[i]);
      let thispre = pre[i];
      // create a new div
      var btn = document.createElement('button');
      btn.classList.add('copy');
      btn.innerHTML = '📋';

      btn.addEventListener('click', function() {
        var text = thispre.firstChild.textContent;
        navigator.clipboard.writeText(text).then(function() {
          console.log('Copied to clipboard');
        }, function(err) {
          console.error('Failed to copy to clipboard', err);
        });
      });

      // append the button to the pre tag
      pre[i].appendChild(btn);
    }
  })()
</script>
</body>

</html>
{{- end -}}